package edu.noobchain.core;

import org.bitcoinj.core.Address;
import org.bitcoinj.core.DumpedPrivateKey;
import org.bitcoinj.core.ECKey;
import org.bitcoinj.core.NetworkParameters;
import org.bitcoinj.wallet.Wallet;
import org.junit.Test;

import java.security.InvalidAlgorithmParameterException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;

public class ECKeyTest {


    // see more
    // * https://www.javaworld.com/article/2078482/java-web-development/bitcoin-for-beginners--part-3--the-bitcoinj-api.html
    // * https://bitcoin.stackexchange.com/questions/29465/how-to-generate-a-bulk-wallet-offline-with-python-java-or-c
    // * https://bitcoin.stackexchange.com/questions/52951/how-to-get-the-private-key-in-hex-from-the-output-of-dumpprivkey/52954
    // * https://bitcoinj.github.io/working-with-the-wallet
    @Test
    public void testCreateAddress() {


        // use test net by default
        String net = "test";


        // create a new EC Key ...
        ECKey key = new ECKey();

        // ... and look at the key pair
        System.out.println("We created key:\n" + key);
        System.out.println("pub:" + key.getPublicKeyAsHex());
        System.out.println("pri:" + key.getPrivateKeyAsHex());


        // either test or production net are possible
        final NetworkParameters netParams;

        if (net.equals("prod")) {
            netParams = NetworkParameters.prodNet();
        } else {
            netParams = NetworkParameters.testNet();
        }

//        Address addressFromKey = key.toAddress(netParams);
//
//        System.out.println("On the " + net + " network, we can use this address:\n" + addressFromKey);

    }

    @Test
    public void generateKeyPair() throws NoSuchProviderException, NoSuchAlgorithmException, InvalidAlgorithmParameterException {
        ECKey key = new ECKey();
        DumpedPrivateKey privKey = key.getPrivateKeyEncoded(params);
        System.out.println("pub:" + key.getPublicKeyAsHex());
        System.out.println("pri:" + key.getPrivateKeyAsHex());


        System.out.println("private key: " + privKey.toBase58());
        Address pubAddress = new Address(params, key.getPubKeyHash());
        System.out.println("public key: " + pubAddress.toBase58());
        System.out.println("--------------------------------");

    }

    NetworkParameters params = NetworkParameters.fromPmtProtocolID("main");

    @Test
    public void testWallet() {
        Wallet wallet = new Wallet(params);
        Address a = wallet.currentReceiveAddress();
        ECKey b = wallet.currentReceiveKey();
        Address c = wallet.freshReceiveAddress();
        System.out.println("address a:" + a.toBase58());
        System.out.println("address c:" + c.toBase58());

    }


    @Test
    public void verifyMessage() throws Exception {
        // Test vector generated by Bitcoin-Qt.
        String message = "hello";
        String sigBase64 = "HxNZdo6ggZ41hd3mM3gfJRqOQPZYcO8z8qdX2BwmpbF11CaOQV+QiZGGQxaYOncKoNW61oRuSMMF8udfK54XqI8=";
        Address expectedAddress = Address.fromBase58(params, "14YPSNPi6NSXnUxtPAsyJSuw3pv7AU3Cag");
        ECKey key = ECKey.signedMessageToKey(message, sigBase64);
        Address gotAddress = new Address(params, key.getPubKeyHash());
        // assertEquals(expectedAddress, gotAddress);

        System.out.println(expectedAddress + ":" + gotAddress);
    }


}